# Generated by Django 5.0.1 on 2024-01-24 14:14

import autoslug.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AboutUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about', models.TextField()),
                ('status', models.BooleanField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ContactForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('mobile', models.CharField(max_length=80)),
                ('query', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('price', models.IntegerField()),
                ('total_price', models.IntegerField()),
                ('date', models.DateField(auto_now_add=True)),
                ('exam_for', models.CharField(choices=[('GATE CS/IT', 'GATE CS/IT'), ('GATE DS&AI', 'GATE DS&AI'), ('UGC NET/JRF', 'UGC NET/JRF')], max_length=50)),
                ('poster', models.FileField(upload_to='images/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('about', models.TextField()),
                ('validity', models.IntegerField()),
                ('status', models.BooleanField()),
                ('slug', autoslug.fields.AutoSlugField(default=None, editable=False, null=True, populate_from='name', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='IndexContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.FileField(upload_to='images/', validators=[django.core.validators.FileExtensionValidator(['jpeg', 'jpg', 'png'])])),
                ('poster', models.FileField(upload_to='images/', validators=[django.core.validators.FileExtensionValidator(['jpeg', 'jpg', 'png'])])),
                ('status', models.BooleanField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='notes_package',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('date', models.DateTimeField()),
                ('exam_for', models.CharField(choices=[('GATE CS/IT', 'GATE CS/IT'), ('GATE DS&AI', 'GATE DS&AI'), ('UGC NET/JRF', 'UGC NET/JRF')], max_length=150)),
                ('premium', models.BooleanField()),
                ('status', models.BooleanField()),
                ('slug', autoslug.fields.AutoSlugField(default=None, editable=False, null=True, populate_from='name', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PromotionalVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(max_length=255)),
                ('video', models.FileField(upload_to='videos/promotion/', validators=[django.core.validators.FileExtensionValidator(['mp4'])])),
                ('thumbnail', models.FileField(upload_to='images/', validators=[django.core.validators.FileExtensionValidator(['jpeg', 'jpg', 'png'])])),
                ('status', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paper_name', models.CharField(choices=[('Computer Science', 'Computer Science'), ('Paper - 1', 'Paper - 1'), ('Paper - 2', 'Paper - 2'), ('Computer Science and Applications', 'Computer Science and Applications'), ('Data Science and Artificial Intelligence', 'Data Science and Artificial Intelligence'), ('Programming and Data Structures', 'Programming and Data Structures'), ('Computer Organization & Architecture', 'Computer Organization & Architecture'), ('Theory of Computation', 'Theory of Computation'), ('Compiler Design', 'Compiler Design'), ('Database Management System', 'Database Management System'), ('Digital Logic', 'Digital Logic'), ('Computer Networks', 'Computer Networks'), ('Operating System', 'Operating System'), ('Algorithms', 'Algorithms'), ('Discrete and Engineering Mathematics', 'Discrete and Engineering Mathematics'), ('General Aptitude', 'General Aptitude'), ('Discrete Structures and Optimization', 'Discrete Structures and Optimization'), ('Computer System Architecture', 'Computer System Architecture'), ('Programming Languages and Computer Graphics', 'Programming Languages and Computer Graphics'), ('System Software and Operating System', 'System Software and Operating System'), ('Software Engineering', ' Software Engineering'), ('Data Structures and Algorithms', 'Data Structures and Algorithms'), ('Theory of Computation and Compilers', 'Theory of Computation and Compilers'), ('Data Communication and Computer Networks', 'Data Communication and Computer Networks'), ('Artificial Intelligence (AI)', 'Artificial Intelligence (AI)'), ('Python', 'Python')], max_length=200)),
                ('question_no', models.IntegerField()),
                ('question_time', models.IntegerField()),
                ('question_text', models.TextField()),
                ('positive_marks', models.IntegerField()),
                ('negative_marks', models.CharField(max_length=20)),
                ('question_type', models.CharField(choices=[('NAT', 'NAT'), ('MCQ', 'MCQ'), ('MSQ', 'MSQ')], max_length=20)),
                ('paper', models.IntegerField(choices=[(1, 1), (2, 2)], default=1)),
                ('status', models.BooleanField()),
                ('nat_range', models.BooleanField(default=False)),
                ('nat_round_decimal_digit', models.IntegerField(default=0)),
                ('slug', autoslug.fields.AutoSlugField(default=None, editable=False, null=True, populate_from='question_no', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('email', models.EmailField(default='turingcodecse@gmail.com', max_length=254)),
                ('password', models.CharField(max_length=100)),
                ('otp', models.IntegerField()),
                ('join_date', models.DateTimeField()),
                ('email_verify', models.BooleanField()),
                ('status', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=200)),
                ('total_question', models.IntegerField()),
                ('duration', models.IntegerField()),
                ('total_marks', models.IntegerField()),
                ('no_of_paper', models.IntegerField(choices=[(1, 1), (2, 2)], default='1')),
                ('report_status', models.BooleanField()),
                ('premium', models.BooleanField()),
                ('total_question_in_paper_1', models.IntegerField(default=0)),
                ('total_question_in_paper_2', models.IntegerField(default=0)),
                ('status', models.BooleanField()),
                ('difficulty_level', models.IntegerField(null=True)),
                ('mode_rate_level', models.IntegerField(null=True)),
                ('easy_level', models.IntegerField(null=True)),
                ('slug', autoslug.fields.AutoSlugField(default=None, editable=False, null=True, populate_from='test_name', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestInstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam', models.CharField(choices=[('GATE', 'GATE'), ('NET', 'NET')], max_length=60)),
                ('instruction_1', models.TextField()),
                ('instruction_2', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='testseries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('price', models.IntegerField()),
                ('total_price', models.IntegerField()),
                ('poster', models.FileField(upload_to='images/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('date', models.DateTimeField()),
                ('validity', models.IntegerField()),
                ('about', models.TextField()),
                ('exam', models.CharField(choices=[('GATE', 'GATE'), ('NET', 'NET')], default='GATE', max_length=60)),
                ('status', models.BooleanField()),
                ('slug', autoslug.fields.AutoSlugField(default=None, editable=False, null=True, populate_from='title', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='video_package',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('package_name', models.CharField(max_length=200)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('status', models.BooleanField()),
                ('slug', autoslug.fields.AutoSlugField(default=None, editable=False, null=True, populate_from='package_name', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='notes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('subject_name', models.CharField(choices=[('Computer Science', 'Computer Science'), ('Paper - 1', 'Paper - 1'), ('Paper - 2', 'Paper - 2'), ('Computer Science and Applications', 'Computer Science and Applications'), ('Data Science and Artificial Intelligence', 'Data Science and Artificial Intelligence'), ('Programming and Data Structures', 'Programming and Data Structures'), ('Computer Organization & Architecture', 'Computer Organization & Architecture'), ('Theory of Computation', 'Theory of Computation'), ('Compiler Design', 'Compiler Design'), ('Database Management System', 'Database Management System'), ('Digital Logic', 'Digital Logic'), ('Computer Networks', 'Computer Networks'), ('Operating System', 'Operating System'), ('Algorithms', 'Algorithms'), ('Discrete and Engineering Mathematics', 'Discrete and Engineering Mathematics'), ('General Aptitude', 'General Aptitude'), ('Discrete Structures and Optimization', 'Discrete Structures and Optimization'), ('Computer System Architecture', 'Computer System Architecture'), ('Programming Languages and Computer Graphics', 'Programming Languages and Computer Graphics'), ('System Software and Operating System', 'System Software and Operating System'), ('Software Engineering', ' Software Engineering'), ('Data Structures and Algorithms', 'Data Structures and Algorithms'), ('Theory of Computation and Compilers', 'Theory of Computation and Compilers'), ('Data Communication and Computer Networks', 'Data Communication and Computer Networks'), ('Artificial Intelligence (AI)', 'Artificial Intelligence (AI)'), ('Python', 'Python')], max_length=150)),
                ('date', models.DateTimeField()),
                ('file_name', models.FileField(upload_to='pdf/', validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('premium', models.BooleanField()),
                ('status', models.BooleanField()),
                ('slug', autoslug.fields.AutoSlugField(default=None, editable=False, null=True, populate_from='title', unique=True)),
                ('notes_package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.notes_package')),
            ],
        ),
        migrations.CreateModel(
            name='question_answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_no', models.IntegerField()),
                ('answer', models.CharField(max_length=20)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.question')),
            ],
        ),
        migrations.CreateModel(
            name='question_solution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_no', models.IntegerField()),
                ('solution_type', models.CharField(choices=[('Video', 'Video'), ('Image', 'Image')], max_length=255)),
                ('solution', models.FileField(null=True, upload_to='solution/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'mp4'])])),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.question')),
            ],
        ),
        migrations.CreateModel(
            name='course_enroll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(null=True)),
                ('order_id', models.CharField(default='ORDS569845', max_length=30)),
                ('amount', models.CharField(default='5000', max_length=20)),
                ('remaning_days', models.IntegerField(default=0)),
                ('validity', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('Success', 'Success'), ('Pending', 'Pending'), ('Expire', 'Expire'), ('Failed', 'Failed')], default='Pending', max_length=20)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.student')),
            ],
        ),
        migrations.CreateModel(
            name='student_info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile', models.CharField(max_length=10, null=True)),
                ('dob', models.DateField()),
                ('address', models.CharField(max_length=200, null=True)),
                ('state', models.CharField(max_length=50, null=True)),
                ('profile_pic', models.FileField(upload_to='images/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('qualification', models.CharField(max_length=200, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.student')),
            ],
        ),
        migrations.CreateModel(
            name='student_answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_no', models.IntegerField()),
                ('answer', models.CharField(max_length=30)),
                ('time_taken', models.IntegerField()),
                ('visited', models.BooleanField()),
                ('paper', models.IntegerField(choices=[(1, 1), (2, 2)], default=1)),
                ('markforreview', models.BooleanField()),
                ('answer_result', models.CharField(default='UnAttempted', max_length=25)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.question')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.student')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.test')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.test'),
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField()),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='turing.student')),
                ('test', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='turing.test')),
            ],
        ),
        migrations.CreateModel(
            name='test_status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_question_paper_1', models.IntegerField()),
                ('current_question_paper_2', models.IntegerField()),
                ('incomplete', models.BooleanField()),
                ('completed', models.BooleanField()),
                ('date', models.DateTimeField()),
                ('total_time', models.IntegerField()),
                ('use_time', models.IntegerField()),
                ('rank', models.IntegerField()),
                ('total_marks', models.CharField(max_length=30)),
                ('current_paper', models.IntegerField(default=1)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.student')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.test')),
            ],
            options={
                'unique_together': {('test', 'student')},
            },
        ),
        migrations.AddField(
            model_name='test',
            name='testseries',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.testseries'),
        ),
        migrations.AddField(
            model_name='course',
            name='testseries',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='turing.testseries'),
        ),
        migrations.CreateModel(
            name='videos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('subject_name', models.CharField(choices=[('Computer Science', 'Computer Science'), ('Paper - 1', 'Paper - 1'), ('Paper - 2', 'Paper - 2'), ('Computer Science and Applications', 'Computer Science and Applications'), ('Data Science and Artificial Intelligence', 'Data Science and Artificial Intelligence'), ('Programming and Data Structures', 'Programming and Data Structures'), ('Computer Organization & Architecture', 'Computer Organization & Architecture'), ('Theory of Computation', 'Theory of Computation'), ('Compiler Design', 'Compiler Design'), ('Database Management System', 'Database Management System'), ('Digital Logic', 'Digital Logic'), ('Computer Networks', 'Computer Networks'), ('Operating System', 'Operating System'), ('Algorithms', 'Algorithms'), ('Discrete and Engineering Mathematics', 'Discrete and Engineering Mathematics'), ('General Aptitude', 'General Aptitude'), ('Discrete Structures and Optimization', 'Discrete Structures and Optimization'), ('Computer System Architecture', 'Computer System Architecture'), ('Programming Languages and Computer Graphics', 'Programming Languages and Computer Graphics'), ('System Software and Operating System', 'System Software and Operating System'), ('Software Engineering', ' Software Engineering'), ('Data Structures and Algorithms', 'Data Structures and Algorithms'), ('Theory of Computation and Compilers', 'Theory of Computation and Compilers'), ('Data Communication and Computer Networks', 'Data Communication and Computer Networks'), ('Artificial Intelligence (AI)', 'Artificial Intelligence (AI)'), ('Python', 'Python')], max_length=60)),
                ('file_name', models.FileField(upload_to='videos/', validators=[django.core.validators.FileExtensionValidator(['mp4'])])),
                ('thumbnail', models.FileField(upload_to='images/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('premium', models.BooleanField()),
                ('video_length', models.CharField(max_length=20)),
                ('status', models.BooleanField()),
                ('video_no', models.IntegerField(default=0)),
                ('quality', models.IntegerField(choices=[(480, 480), (360, 360), (1080, 1080), (720, 720)])),
                ('slug', autoslug.fields.AutoSlugField(default=None, editable=False, null=True, populate_from='title', unique=True)),
                ('video_package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.video_package')),
            ],
        ),
        migrations.CreateModel(
            name='duplicate_video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.FileField(upload_to='videos/', validators=[django.core.validators.FileExtensionValidator(['mp4'])])),
                ('quality', models.IntegerField(choices=[(480, 480), (360, 360), (1080, 1080), (720, 720)])),
                ('slug', autoslug.fields.AutoSlugField(default=None, editable=False, null=True, populate_from='file_name', unique=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.videos')),
            ],
        ),
        migrations.CreateModel(
            name='WatchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watch_time', models.IntegerField(default=0)),
                ('current_status', models.CharField(blank=True, max_length=50, null=True)),
                ('student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.student')),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.videos')),
            ],
        ),
        migrations.CreateModel(
            name='course_notes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.course')),
                ('notes_package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.notes_package')),
            ],
            options={
                'unique_together': {('notes_package', 'course')},
            },
        ),
        migrations.CreateModel(
            name='question_options',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_no', models.IntegerField()),
                ('option_name', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], max_length=255)),
                ('option', models.TextField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.question')),
            ],
            options={
                'unique_together': {('question', 'question_no', 'option_name')},
            },
        ),
        migrations.CreateModel(
            name='student_test_status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy', models.FloatField()),
                ('attempted_question', models.IntegerField()),
                ('correct_question', models.IntegerField()),
                ('incorrect_question', models.IntegerField()),
                ('left_question', models.IntegerField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.student')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.test')),
                ('test_status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.test_status')),
            ],
            options={
                'unique_together': {('test_status', 'test', 'student')},
            },
        ),
        migrations.CreateModel(
            name='testseries_enroll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(null=True)),
                ('order_id', models.CharField(default='ORDS569845', max_length=30)),
                ('amount', models.CharField(max_length=20)),
                ('remaning_days', models.IntegerField(default=0)),
                ('validity', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('Success', 'Success'), ('Pending', 'Pending'), ('Expire', 'Expire'), ('Failed', 'Failed')], default='Pending', max_length=20)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.student')),
                ('testseries', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.testseries')),
            ],
            options={
                'unique_together': {('testseries', 'student')},
            },
        ),
        migrations.CreateModel(
            name='course_video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.course')),
                ('video_package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turing.video_package')),
            ],
            options={
                'unique_together': {('video_package', 'course')},
            },
        ),
    ]
